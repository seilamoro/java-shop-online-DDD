// Common for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
//dependencias y q java es
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        //maven { url 'https://repo.spring.io/milestone' }
    }

    /*ext {
        set('springCloudVersion', "Hoxton.M3")
    }

    ext {
        set('elasticsearch.version', '6.8.4')
    }*/

    dependencies {
        // Prod
        implementation 'org.apache.logging.log4j:log4j-core:2.12.1'
       // implementation 'org.apache.logging.log4j:log4j-api:2.12.1'
        implementation 'com.vlkan.log4j2:log4j2-logstash-layout:0.21'
        //implementation 'io.github.cdimascio:java-dotenv:5.1.3'

        /*implementation 'org.hibernate:hibernate-core:5.4.9.Final'
        implementation 'org.springframework:spring-orm:5.2.2.RELEASE'
        implementation 'org.apache.tomcat:tomcat-dbcp:9.0.29'
        implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
        implementation 'javax.xml.bind:jaxb-api:2.3.1'
        implementation 'org.springframework:spring-context-support:5.2.1.RELEASE'
        implementation 'org.freemarker:freemarker-gae:2.3.29'
        implementation 'org.reflections:reflections:0.9.11'
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation 'org.elasticsearch.client:elasticsearch-rest-client:6.8.5'
        implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:6.8.4'
        runtime 'mysql:mysql-connector-java:8.0.18'*/

        // Test
        //esto en la version final no esta
        testCompile ('org.junit.jupiter:junit-jupiter-api:5.5.2')
        testCompile ('org.mockito:mockito-core:2.+')
        testCompile ('com.github.javafaker:javafaker:1.0.1')//para el test de mother esto es una libreria para que nos genere
        /*testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testImplementation 'org.mockito:mockito-core:2.+'
        testImplementation 'com.github.javafaker:javafaker:1.0.1'*/
       // testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    }

    /*dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }*/

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

//se ejecuta tarea en todos los proyectos,
    //se ejecuta ./gradlew :view_paths se ven los proyectos
    //./gradlew view_paths
    //./gradlew :shared:view_paths
    task view_paths {
        doLast { task ->
            println "$task.project.name"
            println "------------------"
            println "Main: $sourceSets.main.java.srcDirTrees"
            println "   Resources: $sourceSets.main.resources.srcDirTrees"
            println "Tests: $sourceSets.test.java.srcDirTrees"
            println "   Resources: $sourceSets.test.resources.srcDirTrees"

        }
    }
}

// All subprojects (located in src/*)
subprojects {
    group = "s.moro.${rootProject.name}"

    sourceSets {
        main {
            java { srcDirs = ['main'] }
            resources { srcDirs = ['main/resources'] }
        }

        test {
            java { srcDirs = ['test'] }
            resources { srcDirs = ['test/resources'] }
        }
    }

    dependencies {
        //esto no estaba
        compile('org.springframework.boot:spring-boot-starter-web')

        testCompile('org.springframework.boot:spring-boot-starter-test')
        /*implementation 'org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE'

        testImplementation rootProject.sourceSets.main.output
        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.1.RELEASE'

        if (project.name != "shared") {
            implementation project(":shared")
            testImplementation project(":shared").sourceSets.test.output
        }*/
        testImplementation rootProject.sourceSets.main.output
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

// Main project (located in apps/)
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE')
    }
}
//no queremos que se ubique en funcion de lenguaje sino del dominio
sourceSets {
    main {
        java { srcDirs = ['apps/main'] }
        resources { srcDirs = ['apps/main/resources'] }
    }

    test {
        java { srcDirs = ['apps/test'] }
        resources { srcDirs = ['apps/test/resources'] }
    }
}

apply plugin: 'application'

bootJar {
    baseName = 'shop-online-ddd'
    version = '0.0.1'
}

//la clase principal para arrancar
mainClassName = 's.moro.apps.Starter'

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    //implementation 'org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE'
//tiene dependencia a los contextos
    implementation project(":shared")
    implementation project(":backshop")
    implementation project(":shop")
    testCompile('org.springframework.boot:spring-boot-starter-test');
    //testImplementation 'org.springframework.boot:spring-boot-starter-test:2.1.8.RELEASE'
   // testImplementation project(":shared").sourceSets.test.output
}

